<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Mostfa's Blog  |  كلامٌ مُصطفى</title><description>كلام فارغ، لكن لذيذ </description><link>https://imostfa.github.io/Blog</link><language>ar</language><lastBuildDate>Fri, 14 Jan 2022 12:31:46 +0200</lastBuildDate><pubDate>Fri, 14 Jan 2022 12:31:46 +0200</pubDate><ttl>250</ttl><atom:link href="https://imostfa.github.io/Blog/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://imostfa.github.io/Blog/posts/WhyThisBlog</guid><title>ليه عملت المدونة دي؟</title><description>لماذا نحن هنا ؟ هعمل ايه هنا ؟ فكرة المدونة دي في بالي من نوفمر ٢٠٢٠ لكن كما قالت الست، تلهو الحياة وتسخر وبصراحة..</description><link>https://imostfa.github.io/Blog/posts/WhyThisBlog</link><pubDate>Fri, 12 Nov 2021 15:15:00 +0200</pubDate><content:encoded><![CDATA[<h1>ليه عملت المدونة دي؟</h1><p>فكرة المدونة دي في بالي من نوفمبر ٢٠٢٠، لكن تلهو بنا الحياة و تسخر كما قالت الست، وبصراحة انا كسول و مشغول في نفس الوقت فالموضوع بيبقى صعب المدونة دي معمولة كمساحة شخصية لمشاركة حاجات انا شايف انها ممكن تفيد الغير، الاغلب هيكون محتوى تقني، لكن ممكن نتكلم عن حاجات تانية انا شايفها انتريستنج بأختصار، مكان اكبر و افضل، الواحد يفكر فيه بصوت عالي مع الاصدقاء و الاحبة.</p><p>البوستين اللي مكتوبين هنا، كنت كاتبهم و مكملتهمش في ٢٠٢٠، هنضيف ٣ كمان ولا حاجة و نبابلبش للعالم بحاول انه تكون المدونة مريحة للعين خصوصا في الصفحة الخاصة بالمقالات، و يكون فيه هايلايتنج للتيكست و الكود، مش اكتر ولا اقل.</p><h2>ايوا يعني هتعمل ايه؟ 🚶🏻‍♂️</h2><p>والله في التيكنولجي فيه حاجات كتير لذيذة ممكن نتكلم فيها، وهي عبارة عن اهتمامتي اللي بطبيعة الحال بتتغير نظرا لعوامل كتير، ولا او اجزم اني ضليع او متميز في اي واحدة من المواضيع، لكن ادينا بنتسلى و بنشتغل، منها</p><ol>
<li>Computer Graphics</li>
<li>Open source contributions</li>
<li>Swift On Server Development</li>
<li>Reactive programming</li>
<li>Rust Language</li>
<li>SceneKit</li>
<li>SwiftUI Optimizations</li>
<li>Metaheuristics Optimizations</li>
<li>Python</li>
</ol><p>فيه حاجات تانية بعملها ؟ اه بسمع مزيكا حلوة، وبحبها بصراحة، هل يمكن مشاركتها هنا ؟ معرفش، نفكر</p><h2>قوانين 🎯</h2><p>مفيش اي قوانين او مبادئ غير قانون واحد، انه عايز تكون المدونة دي مصدر لمحتوى مميز وذو جودة عالية مكتوب بالعربي، هل هقدر اقدم دا ؟ الله اعلم بس اتمنى، لأنه المحتوى العربي يعاني بشدة، مقدرش اغير كل المحتوى، بس ممكن تبقى بداية للتطوير</p><h2>📰 المدونة</h2><p>المدونة دي جينيريتد عن طريق حاجة اسمها بابلش وهي عبارة عن فريمورك مكتوبة باللغة سويفت، بصراحة هي لذيذة و جميلة لشخص زيي بيكره التعامل مع html و css وفي نفس الوقت بيفضل سويفت كاللغة، برضوا فيها فرص للتطوير رهيبة، ممكن الواحد يشارك فيها لو الوقت سمح الفريمورك نفسها مش بتدعم عربي، بس انا اضفت دعم بدائي جدا اتمنى يفضل شغال، وكان فيها مشاكل فنية بخصوص الرفع على جيت هاب، انا مازلت انتريستد فيها،هل الدنيا هتظبط و تبقى مريحة فعلا ؟ هنشوف لو باظت نعمل غيرها عادي 😂</p><h2>❤️</h2><p>لو انت وصلت لهنا، فشكرًا لوقتك و اهتمامك</p><p>Bye</p>]]></content:encoded></item><item><guid isPermaLink="true">https://imostfa.github.io/Blog/posts/Memory-Alignment-Swift</guid><title>إزاي تعرف احجام ال Types بتاعتك في سويفت ؟</title><description>إزاي تعرف المساحة اللي التايبس بتاعتك بتاخده في الميموري ؟</description><link>https://imostfa.github.io/Blog/posts/Memory-Alignment-Swift</link><pubDate>Sat, 7 Nov 2020 15:15:00 +0200</pubDate><content:encoded><![CDATA[<h1>إزاي تعرف احجام ال Types بتاعتك في سويفت ؟</h1><p>في سويفت، اي اوبجيكت او تايب، ليه ٣ خصائص ممكن يعبرولك عن تعامل الميموري مع الأوبجيكت دا، هنتعرف على خاصيتين من الخصائص دي في التدوينة دي، و بعضها فيه تدوينات اخرى،</p><p>الخصائص اللي هنتكلم عنها النهاردة هي Size , alignment</p><h2>الحجم | Size 📦</h2><hr><p>لو عندك اتنين <code></code><code>struct</code><code></code> في البرنامج بتاعك زي دول:</p><pre><code><span class="keyword">struct</span> Student {
    <span class="keyword">let</span> age: <span class="type">Int</span>
}

<span class="keyword">struct</span> Professor {
    <span class="keyword">let</span> age: <span class="type">Int</span>
    <span class="keyword">let</span> phoneNumber: <span class="type">Int</span>
}

<span class="keyword">let</span> mostfa = <span class="type">Student</span>(age: <span class="number">10</span>)
<span class="keyword">let</span> ahmed = <span class="type">Professor</span>(age: <span class="number">10</span>, phoneNumber: <span class="number">010</span>)

</code></pre><p>و سألتك تتوقع الأوبجيكت اللي اسمه مصطفى اكبر ؟ ولا الللي اسمه احمد ؟ بالمنطق، الأوبجيكت اللي اسمه احمد اكبر علشان هو مكون من متغيرين، <code></code><code>age</code><code></code> و <code></code><code>phoneNumber</code><code></code></p><p>بس ازاي نتأكد من انه كلامنا صح ؟ لازم ارقام تثبت صحة كلامنا ؟ علشان نتأكد هنستخدم MemoryLayout</p><h2>💻 Memory Layout</h2><hr><p>فيه في سويفت نوع اسمه MemoryLayout النوع دا بيخلينا نقدر نتأكد من احجام الأنواع اللي عندنا زي Student و Professor و اي نوع في سويفت زي String و Bool علشان نعرف الSize اللي اي اوبجيكت من نوع Student او من نوع Professor هياخده من الميموري:</p><pre><code><span class="keyword">let</span> studentSize = <span class="type">MemoryLayout</span>&lt;<span class="type">Student</span>&gt;.<span class="property">size</span>
<span class="keyword">let</span> professorSize = <span class="type">MemoryLayout</span>&lt;<span class="type">Professor</span>&gt;.<span class="property">size</span>


<span class="call">print</span>(studentSize) <span class="comment">// prints 8</span>
<span class="call">print</span>(professorSize) <span class="comment">//prints 16 😉</span>
</code></pre><p>هنا استخدمنا MemoryLayout و طلبنا منها تجيب حجم/size اي اوبجيكت هيتعمل من الtypes هيبقى حجمه كام زي ما توقعنا، professor هتاخد مساحة اكبر من الميموري</p><p>ولو عاوزين نتأكد من الكلام على الأوبجيكتس، زي اوبجيكت آحمد و مصطفى اللي فوق</p><pre><code><span class="keyword">let</span> <span class="highlight offset">mostfaSize</span> = <span class="type">MemoryLayout</span>.<span class="call">size</span>(ofValue: mostfa)
<span class="keyword">let</span> ahmedSize = <span class="type">MemoryLayout</span>.<span class="call">size</span>(ofValue: ahmed)

<span class="call">print</span>(<span class="highlight offset">mostfaSize</span>) <span class="comment">//prints 8</span> 
<span class="call">print</span>(ahmedSize) <span class="comment">//also prints 16</span> 
</code></pre><p>لكن ليه ؟ ليه ٨ ؟ و ليه ١٦ ؟ نرجع تاني للحجم<br><br><br>## للحجم | Size</p><h2>نرجع للحجم | Size 📦</h2><hr><p>في سويفت سهل انك تحسب حجم اي ستراكت في البرنامج، لأنه حجم الستراكت = حجم المتغيرات اللي جواه بمعنى إيه ؟ بمعنى انه</p><pre><code><span class="keyword">struct</span> Student {
    <span class="highlight offset"> <span class="keyword">let</span> age: <span class="type">Int</span> </span>
   <span class="regHighlight offset"> <span class="keyword">let</span> inSchool: <span class="type">Bool</span> </span>
}

<span class="highlight offset"> <span class="keyword">let</span> intSize = <span class="type">MemoryLayout</span>&lt;<span class="type">Int</span>&gt;.<span class="property">size</span> </span> <span class="comment">//prints out 8</span>
<span class="regHighlight offset"> <span class="keyword">let</span> boolSize = <span class="type">MemoryLayout</span>&lt;<span class="type">Bool</span>&gt;.<span class="property">size</span> </span> <span class="comment">//prints out 1</span>

<span class="keyword">let</span> studentSize = <span class="type">MemoryLayout</span>&lt;<span class="type">Student</span>&gt;.<span class="property">size</span> <span class="comment">//prints out 9 ( 1+ 8 )</span>

</code></pre><p>علشان الستراكت دا متكون من متغير من نوع Int و متغير من نوع Bool , حجمه هيساوي مجموع حجم الBool و حجم الInt ، سهلة خالص، صح ؟🦹🏻‍♂️</p><p>طيب خلينا نتأكد بمثال تاني</p><pre><code><span class="keyword">struct</span> OtherStudent {
    <span class="keyword">let</span> inSchool: <span class="type">Bool</span>
    <span class="keyword">let</span> age: <span class="type">Int</span>
}
</code></pre><p>هنا دا OtherStudent نفس الStudent اللي فوق بالظبط، لكن الفرق اننا غيرنا ترتيب الproperties بتاعتنا، المفروض يكون نفس الSize ؟!!!</p><pre><code><span class="keyword">let</span> <span class="type">OtherStudentSize</span> = <span class="type">MemoryLayout</span>&lt;<span class="type">OtherStudent</span>&gt;.<span class="property">size</span> <span class="comment">// 16 &lt;- but why ? 😲</span>
</code></pre><p>في الحقيقة، انه تغير ترتيب الproperties بتاعتنا، بس، ادى انه الsize يتغير ⚠️ ليه ؟ دا هيودينا لمفهوم جديد وهو Memory Alignment, هنتكلم عنه بعدين نفهم ازاي سبب اثر على ال Size</p><h2>💻 Memory Alignment</h2><hr><p>علشان نتكلم عن ال Memory alignment محتاجين نرجع لأساس البروسيسور بيشتغل ازاي، و ازاي بيجيب البيانات من الميموري</p><p>بشكل عام في الكمبيوتر البروسيسور او المعالج، هو اللي بيروح يطلب البيانات بتاعتنا في الميموري،</p><img src="https://i.ibb.co/rwT8TGK/Screen-Shot-2020-11-07-at-7-34-38-PM.png" alt="image info"/><p>لو افترضنا انه عندنا بروسيسور بيقدر يجيب بايت واحدة بس في الطلب الواحد من الميموري اللي هيحصل انه البروسيسور علشان يجيب بيانات اللي بالبرتقالي دي هيحتاج يعمل طلبين طلب يطلب فيه البيانات اللي في الصف 0 و طلب للبيانات اللي في صف ١ طلب لقراءة البايت الاولى، و طلب لقراءة البايت التانية، زي ما باين في الصورة</p><p>لو كل طلب بياخد ١ ملي ثانية، الطلبين علشان يتنفذو هياخدوا ٢ ملي ثانية</p><p>جميل، لو جبنا معالج جديد، والمعالج دا يقدر يجيب صفين في الطلب الواحد من الميموري دا معناه انه المعالج بينظر للميموري على هيأة ٢ ، و بيقسمها اتنين-ات <img src="https://i.ibb.co/gVGDd3f/Screen-Shot-2020-11-07-at-7-38-25-PM.png" alt="image info"/></p><p>لو افترضنا انه البيانات بتاعتك كلها، موجودة في اول صفين، بالنسبة للمعالج لما يجي يطلب من الميموري هيقولها هاتيلي الحاجة اللي في الصف رقم 0</p><p>كدا قدرت تحصل على بياناتك كلها، في طلب واحد بس، و كدا اسرع ! دا معناه انه علشان احصل على بياناتي حصلت عليها في طلب واحد بس، يعني 50% اسرع</p><p>المشكلة بتحصل لو البيانات بتاعتك محطوطة بطريقة زي دي: <img src="https://i.ibb.co/W2CxZNg/Screen-Shot-2020-11-07-at-7-39-59-PM.png" alt="image info"/></p><p>هنا علشان تحصل على معلوماتك، لازم البروسيسور يعمل طلب لقراءة الصف رقم ١، و بكدا يكون حصل على نص واحد بس من البيانات علشان يوصل للنصف التاني، محتاج يعمل طلب تاني، عند الصف رقم ٢</p><p>وبعدين يشيل النص الاولاني الفاضي من الصف ١، وبعدين يشيل النص التاني الفاضي من الصف ٢، و يديلك المعلومة بتاعتك كدا النتيجة بطيئة، علشان البيانات بتاعتك، اتحطت في مكان، الماكن دا ادى انه البروسيسور محتاج يبذل عمليات اكتر علشان يحصل عليها المشكلة دي بتسمى misaligned data misalignment</p><p>الحل ليها انه احنا نعمل شيفت للداتا بتاعتنا، بحيث يقدر المعالج، يجيبها، في طلب واحد فقط بس من الميموري، او اقل عدد طلبات ممكن</p><img src="https://i.ibb.co/ZSHmJwK/Screen-Shot-2020-11-07-at-7-28-58-PM.png" alt="image info"/><p>الكلام دا معناه انه احيانًا بضطر اسيب اماكن فاضية في الميموري، علشان بعمل شيفت للبيانات بتاعتي، و بيبقى مكان الشيفت دا، اماكن غير مستخدمة</p><p>ازاي دا بيفرق معانا في سويفت ؟</p><h2>Alignment for basic types 🎲</h2><hr><p>لكل Type في سويفت يوجد قيمة اسمها Alignment</p><pre><code><span class="keyword">let</span> <span class="type">IntegerAlignment</span> = <span class="type">MemoryLayout</span>&lt;<span class="type">Int</span>&gt;.<span class="property">alignment</span> <span class="comment">//prints out 8</span> 
</code></pre><p>ال Alignment لأي Integer في سويفت عبارة عن ٨، الرقم دا معناه إيه ؟ معناه انه عنوان الMemory اللي هيتم وضع فيه الInteger لازم يكون من مضاعفات ال٨</p><p>لو عندي الكود الآتي</p><pre><code><span class="keyword">let</span> <span class="type">A</span> = <span class="number">88</span>
<span class="keyword">let</span> b = <span class="number">17</span>
</code></pre><img src="https://i.ibb.co/P5JYfLY/image.png" alt="image info"/><p>دا معناه انه المتغير A و b لازم يتحطوا في عنوان ميموري من مضاعفات ال٨، نلاحظ عنوان الميموري للمتغير A في الصورة = صفر، و بما انه الصفر من مضاعفات ال٨، يبقى معندناش مشكلة ايضًا، المتغير b موجود في العنوان ٨ وبما انه ال٨ من مضاعفات ال ٨ ايضًا معندناش مشاكل</p><hr><p>امتى يكون عندنا مشكلة ؟ يكون عندنا مشكلة في الموقف الآتي</p><img src="https://i.ibb.co/T1nfzQs/image.png" alt="image info"/><pre><code><span class="comment">/*
A lot of other code in the app which will be saved in memory 
.
.
.
.
.
.
*/</span>

<span class="keyword">let</span> <span class="type">A</span> = <span class="number">88</span>
</code></pre><p>لو فيه بيانات اخرى Other موجودة في الميموري من العنوان صفر الى العنوان ٤ ، و جينا نحط المتغير a في العنوان رقم ٥، مش هنقدر ! ليه ؟ لأنه طبقًا ل Alignment الخاص ب Integer لازم يتم وضعه في عنوان من مضاعفات ال ٨ وبناء عليه هيتم وضع المتغير A في العنوان رقم ٨، و هيكون العناوين ٥،٦،٧ فاضيين</p><p>ومن هنا نقدر نرجع للسؤال الأساسي، ليه OtherStudent حجمه اختلف عن Student</p><h2>Alignment and size 🎳</h2><hr><pre><code><span class="keyword">let</span> boolAlignment = <span class="type">MemoryLayout</span>&lt;<span class="type">Bool</span>&gt;.<span class="property">alignment</span> <span class="comment">//prints out 1</span>
<span class="keyword">let</span> <span class="type">IntegerAlignment</span> = <span class="type">MemoryLayout</span>&lt;<span class="type">Int</span>&gt;.<span class="property">alignment</span> <span class="comment">//prints out 8</span> 

</code></pre><pre><code><span class="keyword">struct</span> Student {
    <span class="highlight offset"> <span class="keyword">let</span> age: <span class="type">Int</span> </span>
   <span class="regHighlight offset"> <span class="keyword">let</span> inSchool: <span class="type">Bool</span> </span>
}

</code></pre><p>بمعرفة انه ال Alignment للBool يساوي ١، دا يعني انه ممكن احط الBoolean values في اي عنوان في الميموري، لأنه كل الارقام تعتبر من مضاعفات الواحد، وايضا بمعرفة انه الAlignment للIntegers يساوي ٨ دا معناه انه ممكن نحط الIntegers في العنواين اللي من مضاعفات ٨</p><img src="https://i.ibb.co/1rds68Y/image.png" alt="image info"/><p>هنا، الInteger عنوان صفر، و الصفر من مضاعفات ال ٨</p><p>و الBoolean عنوان٨، و ال٨ من مضاعفات ال ١ ودا معناه انه ال Alignment تحقق و شغال و زي الفل و بناء عليه حجم الStudent يساوي ٩</p><hr><pre><code><span class="keyword">struct</span> OtherStudent {
    <span class="keyword">let</span> inSchool: <span class="type">Bool</span>
    <span class="keyword">let</span> age: <span class="type">Int</span>
}
</code></pre><p>لو جينا نطبق قواعد الAlignment هنا هنلاقي الآتي</p><img src="https://i.ibb.co/hWPkxNH/image.png" alt="image info"/><p>اول حاجة هيتم وضع الBoolean value في العنوان صفر، و لأنه الصفر من مضاعفات ال١، الAlignment تصبح مظبوطة ✅</p><p>لكن الInteger مينفعش يتحط في العنوان رقم ١ ❌ لأن العنوان رقم ١ مش من مضاعفات ال ٨ وبناء عليه هيتم تركه فاضي، وترك جميع العناوين اللي مش من مضاعفات ٨ فاضية، حتى نصل الى اول رقم من مضاعفات ٨، وهو ال ٨، ونحط فيه الInteger</p><p>النتيجة هنا، انه بسبب ال Alignment اصبح الstruct حجمه ١٦ 🤯</p><p>To be continued ...</p>]]></content:encoded></item><item><guid isPermaLink="true">https://imostfa.github.io/Blog/posts/first-post</guid><title>إيه هو الUnit testing</title><description>نبذة عامة و مختصرة على  التيستنج</description><link>https://imostfa.github.io/Blog/posts/first-post</link><pubDate>Mon, 2 Nov 2020 17:47:00 +0200</pubDate><content:encoded><![CDATA[<h1>إيه هو الUnit testing</h1><h1>إيه هو ال Unit testing</h1><p>هنتكلم هنا عن إيه هو ال Unit testing كفكرة عامة، مع اجزاء من الكود اللازم بشكل مبسط</p><p>لو هنعرف الunit testing كود في سطر واحد، نقدر نقول انه هو عبارة عن كتابة كود يتأكد من انه الفانكشنز اللي انت كتبتها، بتشتغل زي ما احنا عاوزين، ديمًا، و بتؤدي الهدف المطلوب منها ديمًا</p><p>ليه ؟ فيه اسباب كتيرة، ممكن نقول منها</p><p>علشان احيانًا بنكتب كود، و نيجي بعد فترة كبيرة، مش فاكرين هو كان بيعمل، و نعدل عليه، و الابلكييشن يشتغل عادي،</p><ol><li>احيانا بيكون عندنا bug، نيجي نحلها عن طريق انه نغير في كود مكتوب من زمان، و شغال، و نلاقي الbug اتحلت، بس مناخدش بالنا انه و احنا بنحلها بوظنا حاجة تانية مثلا</li><li>احيانًا لو تيم بيشتغل مع بعضه، ممكن واحد يكتب كود شغال، يصحى صاحبه يعدل على الكود دا وسط شغله، و مياخدش باله انه بوظ حاجة او غير حاجة اساسية المفروض الفانكشن تعملها</li><li>تقدر تكتشف الbugs قبل ما التيستر، او الكلاينت، يكتشفها</li><li>بتقلل الكود اللي ممكن يبقى ملوش لازمة في الفانكشن بتاعتك و بتساعد على كتابة كود افضل و انضف - بيساعد على دا حاجات زي TDD</li></ol><p>دلوقتي قولنا تعريف بسيط، و قولنا بعض الاسباب اللي المفروض تخليك تكتب unit testing، نشوف مثال، و مننساش ديمًا الهدف بتاعنا</p><h2>الهدف : اي فانكشن بنكتبها في الكود العادي بتاعنا، تشتغل ديمًا زي ما احنا عاوزين، و تحقق المطلوب منها</h2><p>بمعنى إيه ؟ تخيل لو عندنا الفانكشن دي</p><pre><code><span class="keyword">func</span> insertDot(to sentance: <span class="type">String</span>) -&gt; <span class="type">String</span> {
    <span class="comment">//if the last character in sentance is "." will return the sentance without any modification</span>
    <span class="keyword">guard</span> sentance.<span class="property">last</span> != <span class="string">"."</span> <span class="keyword">else</span> { <span class="keyword">return</span> sentance }

    <span class="comment">//return the senance with a dot added at the end</span>
    <span class="keyword">return</span> sentance + <span class="string">"."</span>

}
</code></pre><h3>الهدف في الفانكشن دي هدفها انها تضيف نقطة في اخر الجملة اللي هتجيلها</h3><p>الفانكشن دي بتحقق الهدف ازاي ؟ عن طريق حاجتين</p><ol><li>لو الجملة اللي اللي عاوزين نضيفلها نقطة، اصلا اخرها نقطة، في الحالة دي احنا مش عاوزين يتضافلها نقطة كمان</li><li>لو الجملة مفيهاش نقطة في آخر الجملة، نضيف لها نقطة</li></ol><p>اللي احنا عاوزين نعمله، اننا نحافظ على الأهداف دي، بمعنى آخر، عايزين نكتب كود، يتأكد، انه ديما، الفانكشن دي بتحقق الهدفين دول.، الكود اللي احنا هنكتبه بيسمى" test" او بشكل ادق بيسمى unit test, هنحتاج نكتب ٢ unit tests، كل test بيتأكد من هدف واحد من الاهداف بتاعتنا</p><p>هنا هنكتب الكود اللي محتاجينه علشان نحقق الهدفين دول - من غير توضيح تفاصيل الكود دا هيكون مكتوب فين - علشان نركز على الفكرة بس</p><hr><p>الكود اللازم لعمل test unit للهدف الاول في الفانكشن دي:</p><p>و الهدف من التيست دا: انه لما لما الفانكشن اللي بنعملها تيست، يجيلها Mostfa. النتيجة تكون Mostfa.</p><pre><code><span class="keyword">func</span> test_NoDublicate_dots() { <span class="comment">//1</span>
        
        <span class="keyword">let</span> output = <span class="call">insertDot</span>(to: <span class="string">"Mostfa."</span>) <span class="comment">//2</span>
        
        
         <span class="highlight offset">  <span class="call">XCTAssertEqual</span>(output, <span class="string">"Mostfa."</span>, <span class="string">"No dot's should be added"</span>) <span class="comment">//3 </span></span>
        
    }
</code></pre><p>في ١:</p><p>بنكتب اسم الفانكشن ، وبنقول هي هتعمل إيه test لإيه في الأسم، هنا الأسم بيقول انه مش عاوزين اكتر من نقطة في الجملة اللي هتطلع لنا</p><p>في ٢:</p><p>بنعمل كول للفانكشن اللي احنا بنجربها و هنحفظ النتيجة في output</p><p>لاحظ انه الجملة اللي بنضيفلها نقطة في آخرها هنا اصلا، فيها نقطة، و من المفترض انه الجملة ترجع زي ماهي، من غير نقطتين في الآخر</p><p>في ٣: بنستخدم فانكشن موجودة في الفريم ورك اللي بنستخدمها للتيست نعمل تيست، اسمها XCTAssertEqual ببساطة احنا بنقول إيه الهدف بتاعنا، او ايه الشيئ اللي عاوزينه يحصل، احنا عاوزن ، output يساوي. .Mostfa ، لأنه دا الهدف بتاعنا،</p><p>الفانكشن دي ممكن نقول انها بتعمل كدا</p><pre><code><span class="keyword">func</span> test_NoDublicate_dots() {

        <span class="keyword">let</span> output = <span class="call">insertDot</span>(to: <span class="string">"Mostfa."</span>)
        <span class="call">XCTAssertEqual</span>(output, <span class="string">"Mostfa."</span>, <span class="string">"No dots should be added"</span>)

        <span class="keyword">if</span> output == <span class="string">"Mostfa."</span> {
            <span class="comment">//we are happy, no errors!</span>
        } <span class="keyword">else</span> {
            <span class="call">assertionFailure</span>(<span class="string">"stop here!, we are not happy, that's not supposed to happen"</span>)
        }
    }
</code></pre><p>لما تشغل التيست دا، النتيجة هتكون علامة صح ✅ علشان فعلا الفانكشن اللي بنعملها تيست insertDot، فعلا مش بتضيف نقطة للجملة لو في اخرها نقطة</p><p>كدا مبروك اول تيست عملناه،</p><p>لو واحد مجنون راح لعب في الفانكشن الاساسية وخلاها كدا</p><pre><code><span class="keyword">func</span> insertDot(to sentance: <span class="type">String</span>) -&gt; <span class="type">String</span> {
    <span class="comment">//if the last character in sentance is "." will return it with any modification</span>
    <span class="keyword">guard</span> sentance.<span class="property">last</span> != <span class="string">" "</span> <span class="keyword">else</span> { <span class="keyword">return</span> sentance }

    <span class="comment">//return the senance with a dot added at the end</span>
    <span class="keyword">return</span> sentance + <span class="string">"."</span>

}
</code></pre><p>و جينا نشغل التيست اللي كتبناه هنلاقي النتيجة كدا</p><p>وجنبها اكس ❌</p><p>ليه ؟ لأنه الtest لما اشتغل لقى انه النتيجة ..Mostfa و دا مش اللي احنا متوقعينه، و اللي مش المفروض الفانكشن دي تعمله</p><p>في الوضع الحالي، بعد اي شغل نعمله في البروجكت، هنعمل run للtest فانكشنز اللي موجودة، المفروض لو شغلنا سليم، كله يبقى اخضر، لكن لو فيه حاجة لونها احمر، هنعرف انه احنا بوظنا حاجة، نروح نشوف بوظنا إيه</p><p>نيجي للهدف التاني بتاعنا اللي بنعمله test وهو منطقي اكتر،</p><p>في التيست دا، بنتأكد انه لو كان الجملة بتاعتنا مفيش نقطة في آخرها،</p><pre><code><span class="keyword">func</span> test_dot_isAdded() {
        <span class="keyword">let</span> output = <span class="call">insertDot</span>(to: <span class="string">"Essam"</span>)
        <span class="call">XCTAssertEqual</span>(output, <span class="string">"Essam."</span>)
    }
</code></pre><p>بكل بساطة بنعمل فاريبل output و بقول للفانكشن بتاعتنا تضيف نقطة في آخر الجملة Essam</p><p>و بستخدم نفس الفانكشن اللي استخدمناها فوق، بنقول، انه احنا بنتوقع، انه ديمًا، الأوت بوت يكون .Essam</p><p>ولو كل حاجة ماشية زي ما توقعنا</p><p>ولو فيه واحد مجنون كان بيشتغل على الكود، و عمل تغير على الفانكشن الاصلية بتاعتنا و خلاها كدا مثلا</p><pre><code><span class="keyword">func</span> insertDot(to sentance: <span class="type">String</span>) -&gt; <span class="type">String</span> {
    <span class="comment">//if the last character in sentance is "." will return it with any modification</span>
    <span class="keyword">guard</span> sentance.<span class="property">last</span> != <span class="string">"."</span> <span class="keyword">else</span> { <span class="keyword">return</span> sentance }

    <span class="comment">//return the senance with a dot added at the end</span>
    <span class="keyword">return</span> sentance + <span class="string">"💕"</span>

}
</code></pre><p>لما نيجي نشغل التيست، هنلاقي النتيجة كدا</p><p>ودا متوقع، بيقولنا انه المفروض لما الجملة تكون Essam الناتج يكون .Essam مش يكون 💕Essam، فأحنا نروح نبص على الفانكشن و نشوف غيرنا فيها إيه علشان الtest ينجح تاني</p><p>ولو كل حاجة مظبوطة، دي الصورة النهائية اللي المفروض نحصل عليها</p><p>و بكدا نكون وصلنا نهاية المقالة النهاردة، احنا هنا اتكلمنا عن مقدمة عن الtesting، مع مثال بسيط جدا جدا جدا، بيوضح ازاي بنفكر في التيستنج، و المفروض نعمل إيه علشان نعمل تيست</p><p>فيه حاجات ناقصة، زي مثلا الكود بتاعت التيست بيتكتب فين بالظبط في البروجكت، و ازاي نعمل تيست لحاجة معقدة اكتر من كدا، كل النقاط دي ممكن نتكلم عنها في جزء تاني بيشرح الموضوع تفصيلا،</p><p>و نعمل tests لل API layer بتاعتنا، بشكل متقدم اكتر.</p>]]></content:encoded></item></channel></rss>